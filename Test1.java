// Java SE Bronze 8-12
class A {}
class B extends A {}
class Test1 {
  public static void main(String[] args) {
    A a = new B();
    B b = (B)a;
  }
}

/*
 コンパイルは成功するが、
 aに代入しているのは、 B b = (B)a;であるAクラスのオブジェクト
 実行時に間違ったキャストを行ったことを示すClassCastException エラーが発生

 キャストとは
 一般的にあるデータ型を別のデータ型に変換する事を指す
 Javaでは、主に2つの場面でキャストが行われる
 1⃣　プリミティブ型のキャスト
      異なるデータ型の値を別のデータ型に変換するために使用される
      例えば、整数から不動小数点型へ変換や、文字型から整数型への変換がある

        double d = 10.5;
        int i = (int)d; // ダウンキャスト（doubleからintへの変換）
 2⃣　クラス型のキャスト
    クラスの階層構造において、スーパークラスとサブクラスの間で行われる
    サブクラスのインスタンスをスーパークラスの型にキャストすることは暗黙的に行わるが、スーパークラスのインスタンスを
    サブクラスの型にキャストする際には明示的なキャストが必要になる

      class Animal {}
      class Dog extends Animal {}

      Animal animal = new Dog(); // アップキャスト（サブクラスからスーパークラスへの変換）
      Dog dog = (Dog)animal; // ダウンキャスト（スーパークラスからサブクラスへの変換）

    クラス型のキャストにおいて、ダウンキャストは注意が必要になる
    スーパークラスのインスタンスが実際にサブクラスのインスタンスでない場合、実行時にClassCastException がスローされる可能性がある
    キャストは、データ型の変換や階層構造の中での型変換に使用されその正しい使用はプログラムの正確性に重要な影響を与える


 */