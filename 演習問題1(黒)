/*
変数や式の型の扱いについて
プログラミング言語は静的言語と動的言語の2つに分かれる
これらの違いは、変数や式の型情報の扱い方にある


【２】
Javaの特徴に関する問題
処理を複数同時に実行することで、ソフトウェア全体の処理性能を向上させる技術を「並行処理」
Javaはこの並行処理を容易に実現できるよう専用の構文や標準クラスライブラリを提供しており、
ほかのプログラム言語では実装が困難だった並行処理が比較的容易に実現できるようになっている

Javaに限らず、一般的な並行処理の実現方法には次の2つがある
・同じアプリケーションを同時実行する【マルチプロセス】
・1つのアプリケーションで複数の処理を交互に切り替えて実行する【マルチスレッド】

【プロセス】
アプリケーションが起動するときに、OSから割り当てられたメモリ空間の事を指す
このメモリ空間には、プログラムを自国するのに必要なコードや変数、その他すべてが展開されていることから、
プロセスは「アプリケーションそのもの」と呼ぶこともできる
マルチプロセスは、アプリケーション（プロセス）を複数同時に起動し、OSが交互にアプリケーションを
切り替えながら実行することで並行処理を実現する

もう一方のマルチスレッドは、プロセス内を複数に分割することで並行処理を実現する

【スレッド】
プロセス内で実行される一連の処理の流れの事で、マルチスレッドとは、1つのプロセス内で複数の処理の流れ（スレッド）が
並行鬼実行される並行処理の形態

【マルチプロセスの問題点】
マルチスレッドに比べて起動に時間がかかること
これは、プロセス起動時にOSからメモリ空間を割り当ててもらう必要があるため
それに対してマルチスレッドは、割り当て済みのメモリ空間を分割して使うため、
マルチプロセスに比べてパフォーマンスに優れるというメリットがある

【マルチプロセス】
＜メリット＞
・プログラム異常時に、ほかの処理に影響が出にくい
・プログラムがシンプルで分かりやすい
・各処理の終了時にリソースが確実に解放される
・利用可能なメモリ量やCPU時間などのリソース制限を受けない

＜デメリット＞
・リソースを多く必要とする
・プロセス生成時の処理に時間がかかる
・プロセス間のデータ連携が煩雑
・UNIX系OS以外では利用が難しい

【マルチスレッド】
＜メリット＞
・リソースを節約できる
・並行する処理数を素早く増やせる
・データ連携が簡単である
・さまざまなプラットフォームで実現しやすい

＜デメリット＞
・プログラムが複雑化しやすい
・プログラム異常時に、ほかの処理hに影響がでる
・利用可能なメモリ量やCPU時間などのリソースの制限を受ける


Javaはシングルプロセス、マルチスレッドで並行処理を実現するが、
どのスレッドを実行するかはJVM(Java Virtual Machine)が判断する
プログラムから並行処理を完全に制御できない
Javaでは、並行して「やりたいこと」をプログラミングできるが、
その処理順を自由に制御できるわけでない

正しいもの
・マルチスレッドによる並行処理をサポートする
・並行処理を部分的に制御できる


【３】
Javaに関する説明2つ選択
・特定のOSに特化したプログラミング言語である  // X
      特定のプラットフォームやOSに依存しない

・ほかのプログラミング言語に比べて高速に実行できる  // X
      インタープリタ方式はソースコードを1行ずつコンパイルしながら実行するため
      効率が悪く、事前コンパイル方式に比べて実行速度が落ちる

・あらかじめ機械言語にコンパイルされる  // X
      JVMがプログラムの実行時にOS専用のコードにコンパイルしながらプログラムを実行する

・メモリ管理が自動化される    // 〇
      ガベージコレクションによってメモリ管理が自動化できる

・セキュリティが向上する実行方式を取り入れている  // 〇
      セキュリティが向上する

Javaの特徴に関する問題
Javaの特徴を表す言葉
「Write Once, Run Anywhere(一度書いたら、どこまでも動く)」がある
この特徴を実現しているのがJVM(Java Virtual Machine)という仮想的なコンピュータ

《コンパイル》
ソースコードから機械語への変換作業の事を「コンパイル」
この作業を変換するソフトウェアの事を「コンパイラ」と呼ぶ

≪事前コンパイル方式≫
ソースコードをあらかじめコンパイルしてから実行する方式のこと
対象OS専用のコードに変換されているため高速に実行できる
その反面、専用コードであるために対象OS以外では実行できないことがデメリット
事前コンパイル方式を採用しているプログラミング言語には、CやC++などがある

≪インタープリタ方式≫
「インタープリタ」と呼ばれる仲介アプリケーションを使って、ソースコードを実行時に
コンパイルすることが特徴
インタープリタ方式では、事前にコンパイルして専用コードに変換しておく必要がない為
理論上は対象OSごとのインタープリンタを用意すれば、プログラムをどのようなOSでも実行できる
このインタープリタ方式を採用しているプログラミング言語には、PHPやJavaScriptなどがある

JAvaがインタープリタ方式を採用しているのは以下の理由から
1．特定のプラットフォームやOSに依存しない
2．ガベージコレクションによってメモリ管理が自動化できる
3．セキュリティが向上する

インタープリタ方式の特徴そのもの
この方式であれば実行時にコンパイルするため、実行環境に合わせたJVMを用意すればどのような
コンピュータやOSであっても実行可能

インタープリタ方式の場合、OSがプログラムを直接実行するのではなく、
JavaであればJVM、JavaScriptであればブラウザという具合に、コンパイルしながら実行する
仲介アプリケーションが存在する
この仲介アプリケーションが、実行時にどのようにメモリを使用するかを決めたり、不要になった
メモリはないかを確認したり、問題のあるコードはないかをチェックしたりしながらプログラムを
実行するため、上記の理由2と3のようなメリットが生まれる


【４】
Javaプログラムの作成から実行までの流れに関する説明正しいもの2つ選択
・コンパイラによって機械言語にコンパイルされる    // X
・コンパイラによって中間コードにコンパイルされる  // 〇
      中間コードは、より効率が良いコードへの最適化だけでなく、変換効率を上げる
      ために2進数で表現されるバイトコードで記述

・実行可能ファイルを作成する  // X
      実行時にネイティブコードにコンパイルしてもファイルには書き出さずCやC++
      のように実行可能ファイルを作ることはない
      JVMが実行時にコンパイルしたネイティブコードは、そのまま実行されるか、
      頻繁に実行するコードであればメモリ上にキャッシュされる

・JVMにクラスファイルを読み込ませる // 〇
      中間子小戸が記述されたファイルの事を指す

Javaプログラムの差k末井から実行までの流れに関する問題
JVMによるインタープリタ方式の実行形態を採用することにより様々なメリットが得られるが、
その一方でいくつかの問題点もある
最も顕著な問題が、パフォーマンス

≪実行時コンパイル方式≫
ソースコードから不要なコードを排除し、パフォーマンスが向上するようにコードを変換しておくインタープリタ方式
の1つが「実行時コンパイル方式」
コンパイラによって実行に最適化されたコードに変換されているため、インタープリタ方式でも
パフォーマンスが低下しにくいという特徴を持つ
Javaはこの実行時コンパイル方式を採用した「Hotspot VM」という技術をJVMに導入している
その結果、Javaは事前にコンパイルしておく言語と比べても遜色ないほどのパフォーマンスを持つことに成功している


【６】
Javaに関する説明、正しいもの２つ選択
・ 自動的にメモリを解放する // 〇
          ガベージコレクションは保管しておく必要がなくなったメモリ領域を自動的に検出し、
          解放する機能

・メモリを任意のタイミングで解放できる  // X
          ガベージコレクションはガベージコレクタのアルゴリズムに従って実行されるため
          プログラマーがメモリ解放のタイミングを制御することはできない

・ポインタを使ってメモリを自由に操作できる  // X
          CやC++といった言語では、メモリアドレスを指し示す「ポインタ」を用いてメモリを
          自由に操作することができる
          ポインタはプログラミングの自由度を上げる反面、解決が困難なバグの原因にもなっている
          そのため、Javaではプログラムからメモリを直接操作できないようになっている

・メモリの効率的な利用を自動化する  // 〇
          ガベージコレクタには、ガベージコレクションによってメモリ領域に空き領域がでいた時、
          細切れになったメモリ領域を整理し、空き領域を確保する「コンパクション」と呼ばれる機能もある
          Javaはこの機能のおかげで効率的にメモリ領域を使うことができる



Javaのメモリに関する問題
メモリは有限なリソースであり、無秩蔵に使えるわけではない
次々とメモリを使用し続けた結果、もしメモリが不足してしまえば、森リークが発生し、処理速度が極端に
遅くなったり、エラーが発生したり、システムが突然終了したりする事態が発生する
最悪の場合、OSをも巻き込んタトラブルへと発展する
ソフトウェアを安定稼働させるためには、使わなくなったメモリ領域を解放し、プログラムの実行に
必要な空きメモリを常に確保するメモリ管理が欠かせない

≪ガベージコレクション≫
Javaは自動メモリ管理機能を備えている
保管しておく必要がなくなったメモリ領域を自動的に検出し、開放する機能
この機能のおかげで、プログラマーはメモリ管理を行う必要がなくなり、より生産的な作業に時間を
費やすことができるようになった


【８】
Javaのソースファイルに関する説明、正しいもの2つ選択
・1つのソースファイルにpublicなインタフェースを複数記述できる // X
        1つしか記述できない

・ソースファイルの名前はpublicなクラス名と一致させなくてはいけない  // 〇
        ソースファイルの名称はpublicなクラス名の名前、インタフェース名、列挙型名の
        いずれかと一致させなければいけない

・1つのソースファイルには、1つのクラスだけを記述できる  // X
      publicなクラスやインタフェース、列挙型はソースファイルに1つしか記述できないが、それ以外の
      アクセス修飾子を持つものであれば複数記述できる

・1つのソースファイル内に、デフォルトのアクセス修飾子で修飾した 
  インタフェースとpublicなクラスの両方を記述できる  // 〇
      publicなクラスやインタフェース、列挙型はソースファイルに1つしか記述できないが、それ以外の
      アクセス修飾子を持つものであれば複数記述できる

・1つのソースファイルにpublicなクラスを複数記述できる // X
        1つしか記述できない


ソースファイルに関する問題
ソースファイルにはpublicで修飾されたクラスやインタフェース、列挙型は1つしか記述できない
publicなクラスやインタフェース、列挙型はソースファイルに1つしか記述できないが、それ以外の
アクセス修飾子を持つものであれば複数記述できる


ソースファイルには、publicで修飾されたクラスやインタフェース、列挙型は1つしか記述できない
また、ソースファイルの名称はpublicなクラスの名前、インタフェース名、列挙型名のいずれかと一致させる

ソースファイル内に複数のクラスを定義した場合、クラスごとのクラスファイルが出力される
 */