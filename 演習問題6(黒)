// 【２】
/*
クラスブロック内に定義できる要素として正しいもの
・ フィールド // 〇
・ メソッド // 〇
・ コンストラクタ // 〇
・ パッケージ

クラスのブロック内に定義できる要素に関する問題
クラスは3つの要素で成り立つ
・ フィールド
・ コンストラクタ
・ メソッド

インスタンスの事前準備のためのコンストラクタ
 */

// 【８】
/*
メソッドをオーバーロードする場合に、一致させなければいけないメソッド定義の要素１つ選択
・ メソッド名、引数の数
・ メソッド名、引数の型と順番
・ メソッド名、戻り値の型
・ メソッド名のみ // 〇

オーバーロードの規定に関する問題
「多重定義」と呼ばれ、1つのクラス内に引数の型や数、並び順が異なる、同じ名前のメソッドを複数定義することができる
クラス名や変数名などの識別子は重複が許されていないが、メソッドの場合はメソッド名と引数のセットで識別されるため、
引数さえ異なれば同名の目祖度dが定義可能
このメソッド名と引数のセットの事を「シグニチャ」と呼ぶ
シグニチャには、4つが含まれる
・ メソッド名
・ 引数の数
・ 引数の型
・ 引数の順番

メソッド名と引数が同じで、戻り値の型だけが違うメソッドを多重定義することはできない
そのようなメソッドを定義するとコンパイルエラーが発生する

オーバーロードは、メソッドの処理目的は同じでも、様々なデータを引数に渡して処理したい場合に用いる
例えば、配列の要素を並べ替える処理を目的としていて、int配列型の変数とdouble配列型の変数の両方を
並べ替えたい場合は、メソッドのオーバーロードを用いることができる

《オーバーロード》
「多重定義」
1つのクラス内に引数の型や数、並び順が異なる、同じ名前のメソッドを複数定義すること
「再定義」を意味するオーバーライドとの違いを抑えておくこと！

シグニチャは、メソッド名、引数の数、引数の型、引数の順番が含まれる
メソッドの戻り値は含まれないことに注意する
*/

// 【９】
/*
メソッドのシグニチャを構成する要素として正しいもの4つ選択
・ 引数の数   // 〇
・ 引数の名前
・ アクセス修飾子
・ 引数の型   // 〇
・ メソッド名 // 〇
・ 戻り値の型
・ 引数の順番   // 〇

メソッドのシグニチャに含まれるもの
メソッド名、引数の数、引数の型、引数の順番

引数の名前はシグニチャに含まれない
引数の名前だけを変えたシグニチャのメソッドを複数定義すると同一のメソッド定義と認識され
コンパイルエラーになる
アクセス修飾子、戻り値型は、シグニチャに含まれない
 */

// 【１３】
public class Main {
  public static void main(String[] args) {
    Station s = new Station();  // 引数なしのコンストラクタ
    s.setName("Santa Clara");
    s.printName();
  }
}

class Staion {
  private String name;
        // 明示的なコンストラクタ定義がない
        // 下記の記述でコンストラクタを定義しているためデフォルトコンストラクタは
        // 生成されない

  public Station(String name) {
    this.name = name;
  }
  public void printName() {
    this.name = name;
  }
  public void printName() {
    System.out.println(name);
  }
}
/*
・ 何も表示されない
・「Santa Clara」と表示される
・ コンパイルエラーが発生する // 〇
・ 実行時に例外がスローされる

デフォルトコンストラクタに関する問題

《デフォルトコンストラクタ》
クラスにコンストラクタを明示的に記述し、なかった場合に、コンパイラが自動的に追加する引数なしのコンストラクタ
インスタンスを生成するにはコンストラクタが必要
コンストラクタを明示的に記述しなかった場合は、「インスタンスを生成できないクラス」になってしまう
そうした矛盾がおきないよう、デフォルトコンストラクタが存在している
 */

// 【１４】
public class Main {
  public static void main(String[] args) {
    Document d = new Document("James"); // インスタンス化
    d.printOwner();
  }
}

class Document {
  private String owner;

  public Document() {
    this.owner = "none";
  }
  public Document(String owner) {
    this.owner = owner;
  }
  public void printOwner() {
    System.out.println(owner);
  }
}
/*
・ 何も表示されない
・ 「none」と表示される
・ 「James」と表示される  // 〇
・ コンパイルエラーが発生する
・ 実行時に例外がスローされる

オーバーロードされたコンストラクタの呼び出しに関する問題
オーバーロードされたメソッドを呼び出す際、引数の型や数、順番によって呼び出されるメソッドが選択
これはメソッドの一種であるコンストラクタも同様
 */

// 【１５】
/*
this()の説明として正しいもの1つ選択
・ 自クラスのインスタンスを指し示し、メソッドの呼び出しに利用する
・ 自クラスのインスタンスを指し示し、コンストラクタの呼び出しに利用する // 〇
・ 自クラスのインスタンスを指し示し、フィールドの参照に利用する
・ 自クラスのインスタンスを指し示し、目祖度dの呼び出しに利用する

コンストラクタ内から、オーバーロードした別のコンストラクタを呼び出す方法に関する問題
this()は、コンストラクタから、オーバーロードした別のコンストラクタの呼び出しをする際に利用

自クラスのinスタンを際し示すthisキーワードと間違えないように注意する

this()は、コンストラクタブロック内の先頭行でのみ利用可能
this()をコンストラクタブロック内の先頭行以外で利用するとコンパイルエラーになる
 */

// 【１６】
public class Main {
  public static void main(String[] args) {
    Book b = new Book();
    b.print();
  }
}

class Book {
  private String title;
  private int price;

  public Book() {
    // insert code here
  }
  public Book(String title, int price) {    // シグニチャが一致するものを選ぶ
    this.title = title;
    this.price = price;
  }
  public void print() {
    System.out.println(title + "," + price);
  }
}
/*
・ this("none", 0); // 〇
・ Book("none", 0);
・ this("none");
・ Book("none");

this()に関する問題
コンストラクタから、オーバーロードした別のコンストラクタを呼び出す際には、
コンストラクタ名で呼び出すことはできない

this("none");はthis()で呼び出すが、引数にString型のデータを1つ受け取るコンストラクタが
定義されていない為コンパイルエラー


 */
// 【１８】
/*
アクセス修飾子とその意味の組み合わせとして、正しいもの2つ選択
・ public --- すべてのクラスからアクセス可能  // 〇
・ private --- 同一パッケージ内のクラスと、サブクラスからアクセス可能（protected）
・ public --- 同一パッケージ内のすべてのクラスからアクセス可能(なし)
・ private --- 同一クラスからアクセス可能  // 〇

アクセス修飾子の意味を問う問題
府イールドやメソッドをアクセス修飾子で修飾することで、ほかのクラスからそのフィールドやメソッドが使えるか
どうかを生業できる

 */

// 【１９】
public class Main {
  public static void main(String[] args) {
    Food f = new Food("a food");
    f.name = "b food";
    f.print();
  }
}

class Food {
  private String name;

  public Food(String n) {
    name = n;
  }
  public voidprint() {
    System.out.println(name);
  }
}
/*
・ 何も表示されない
・ 「a food」と表示される
・ 「b food」と表示される
・ コンパイルエラーが発生する   // 〇
・  実行時に例外がスローされる

アクセス制御に関する問題
設問のコード4行目では、Foodの参照を持つ変数fのフィールドnameに"b food"を代入している
しかし、フィールドnameのアクセス修飾子はprivateのため、ほかのクラスからはアクセスできない
そのためコンパイルエラーになる
 */

// 【２０】
public class Main {
  public static void main(String[] args) {
    System.out.println(ClassA.str);
  }
}

class ClassA {
  [  1  ] String str = "hoge";    // staticフィールドの宣言
}
/*
実行結果 ＞ hoge
・ void(戻り値型に指定できるキーワードで、フィールド宣言には利用できない)
・ static   // 〇
・ final(定数宣言に利用するキーワード。staticを記述しないとインスタンスフィールドとして扱われるため
        「クラス名.フィールド名」と記述できない)
・ public(アクセス修飾子。staticキーワードを記述しないとインスタンスフィールドとして扱われる)

staticフィールドに関する問題
インスタンスを生成しなくても利用できるフィールド
staticフィールドの宣言
アクセス修飾子 static 型名 変数名;

staticフィールドを宣言するには「型名」の前にstaticキーワードを記述する
アクセス修飾子とstaticキーワードの順番を逆にしても可
staticフィールドはインスタンス化しなくても、「クラス名.staticフィールド名」と
記述して利用できる
また、staticフィールドはすべてのインスタンスで共有される
 */

// 【２２】
public class Main {
  public static void main(String[] args) {
    part p1 = new Part();
    part p2 = new Part();
    p1.count = 1;
    System.out.println(p2.count);
  }
}

class Part {
  public static count = 0;
}
/*
・ 何も表示されない
・ 0が表示される
・ 1が表示される  // 〇
・ コンパイルエラーが発生する
・ 実行時に例外がスローされる

staticフィールドに関する問題
staticフィールドは、すべ手のインスタンスで共有されるフィールド
インスタンスごとにデータを管理できるインスタンスフィールドとは異なることに注意

インスタンスフィールドは、インスタンスごとにデータを保持する
そのデータは、Javaが使えるメモリ領域のうち、「ヒープ領域」と呼ばれる領域に保持される
一方、staticフィールドは、ヒープ領域とは別の「static領域」にデータが保持される
各インスタンスはstatic領域への参照を保持しているため、staticフィールドはすべてのインスタンスで共有
 */

// 【２３】
public class Main {
  public static void main(String[] args) {
    ClassA.domethod();
  }
}

class ClassA {
  [  1  ] void deMethod() {
    System.out.println("do something");
  }
}
/*
実行結果 ＞ do something

・ public
・ this
・ super
・ static   // 〇

staticメソッドの定義に関する問題
staticメソッドが定義されたクラスから生成されたインスタンスで共有されるのが特徴
《構文》
アクセス修飾子 static 戻り値型 メソッド名(引数) {
    // 処理
}
 */

// 【２５】
public class Main {
  public static void main(String[] args) {
    int n = ClassA.getNunber();
    System.out.println(n);
  }
}

class ClassA {
  private int number = 0;

  public static int getNumber() {
    return number;
  }
}
/*
・ 何も表示されない
・ 0が表示される
・ コンパイルエラーが表示される   // 〇
・ 実行時に例外がスローされる

staticメソッド内からのフィールドアクセスに関する問題
staticメソッド内から、自クラスに定義されたインスタンスフィールドと
インスタンスメソッドは利用できないことに注意する

staticメソッドは、インスタンスを生成しなくても呼び出せるという特徴がある
もし、staticメソッド内からインスタンスフィールドやインスタンスメソッドを
利用できてしまうと、インスタンスが生成されていない状態で、
インスタンスフィールドやインスタンスメソッドが利用できることになってしまい、
staticメソッドの特徴との矛盾が生じる

staticメソッドからインスタンスフィールドおよびインスタンスメソッドにアクセスすると、
コンパイルエラーになる

 */